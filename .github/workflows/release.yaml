name: Release Charts

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    environment: github-pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Auto add repos from Chart.yaml + build deps
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
      
          declare -A ALIAS_URL
          while IFS='=' read -r k v; do
            alias=$(echo "$k" | sed -n 's/^HELM_REPO_URL_//p' | tr '[:upper:]' '[:lower:]')
            [ -z "$alias" ] || ALIAS_URL["$alias"]="$v"
          done < <(env)
      
          echo "==> scan charts/*"
          for chart in charts/*; do
            [ -f "$chart/Chart.yaml" ] || continue
            echo "::group::deps for $chart"
            yq -r '.dependencies[]? | [.name, .version, .repository] | @tsv' "$chart/Chart.yaml" | while IFS=$'\t' read -r name ver repo; do
              [ -n "${repo:-}" ] || continue
              echo "dep: name=$name ver=$ver repo=$repo"
              case "$repo" in
                http*://*)
                  rname=$(echo "$repo" | sed -E 's#https?://##; s#[^a-zA-Z0-9]+#-#g')
                  helm repo add "$rname" "$repo" || true
                  ;;
                @*)
                  alias="${repo#@}"
                  url="${ALIAS_URL[$alias]:-}"
                  if [ -z "$url" ]; then
                    echo "::error::repo alias @$alias is not mapped. Set HELM_REPO_URL_${alias^^}=https://your.repo.url"
                    exit 1
                  fi
                  helm repo add "$alias" "$url" || true
                  ;;
                oci://*)
                  reg="$(echo "$repo" | sed -E 's#oci://([^/]+)/.*#\1#')"
                  if [ "$reg" = "ghcr.io" ] && [ -n "${GITHUB_TOKEN:-}" ]; then
                    helm registry login ghcr.io -u "${GITHUB_ACTOR}" -p "${GITHUB_TOKEN}" || true
                  fi
                  ;;
                *)
                  echo "::warning::unsupported repo scheme: $repo"
                  ;;
              esac
            done
            echo "::endgroup::"
          done
      
          helm repo update
      
          echo "==> build deps"
          for chart in charts/*; do
            [ -f "$chart/Chart.yaml" ] || continue
            echo "+ helm dependency build $chart"
            helm dependency build "$chart"
          done
      
          echo "==> debug cache"
          ls -l ~/.cache/helm/repository || true
          helm repo list || true
      - name: Prepare GPG key
        run: |
          gpg_dir=.cr-gpg
          mkdir "$gpg_dir"
          keyring="$gpg_dir/secring.gpg"
          base64 -d <<< "$GPG_KEYRING_BASE64" > "$keyring"
          passphrase_file="$gpg_dir/passphrase"
          echo "$GPG_PASSPHRASE" > "$passphrase_file"
          echo "CR_PASSPHRASE_FILE=$passphrase_file" >> "$GITHUB_ENV"
          echo "CR_KEYRING=$keyring" >> "$GITHUB_ENV"
        env:
          GPG_KEYRING_BASE64: "${{ secrets.GPG_KEYRING_BASE64 }}"
          GPG_PASSPHRASE: "${{ secrets.GPG_PASSPHRASE }}"
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          config: cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
